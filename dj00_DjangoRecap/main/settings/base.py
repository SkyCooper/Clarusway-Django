"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    #? my apps
    'users',
    'fscohort',
    
    #? trirdpart apps
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'dj_rest_auth',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

#! createsuperuser veya başka kullanıcı oluşturduğumuz zaman,
#! password validasyon ile uğraşmak istemiyorsak bu bölümü base.py'den alıp sadece prod.py içine koyabiliriz,
#! böylece development aşamasında basit şifre verip geçebiliriz.

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

#? for images
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media/'

# media_url -> hangi urlyi kullanacaksın
# media_root -> hangi klasöre yüklemek istersin.
# ilk resim eklendikten sonra media isimli bir klasör oluşur ve eklenen resim oraya kayıt edilir.

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = { 
    "version": 1, 
    # is set to True then all loggers from the default configuration will be disabled. 
    "disable_existing_loggers": True, 
    # Formatters describe the exact format of that text of a log record.  
    "formatters": { 
        "standard": { 
            "format": "[%(levelname)s] %(asctime)s %(name)s: %(message)s" 
        }, 
        'verbose': { 
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}', 
            'style': '{', 
        }, 
        'simple': { 
            'format': '{levelname} {message}', 
            'style': '{', 
        }, 
    }, 
    # The handler is the engine that determines what happens to each message in a logger. 
    # It describes a particular logging behavior, such as writing a message to the screen,  
    # to a file, or to a network socket. 
    "handlers": { 
        "console": { 
            "class": "logging.StreamHandler", 
            "formatter": "standard", 
            "level": "INFO", 
            "stream": "ext://sys.stdout", 
            }, 
        'file': { 
            'class': 'logging.FileHandler', 
            "formatter": "verbose", 
            'filename': './debug.log', 
            'level': 'INFO', 
        }, 
    }, 
    # A logger is the entry point into the logging system. 
    "loggers": { 
        "django": { 
            "handlers": ["console", 'file'], 
            # log level describes the severity of the messages that the logger will handle.  
            "level": config("DJANGO_LOG_LEVEL"), 
            'propagate': True, 
            # If False, this means that log messages written to django.request  
            # will not be handled by the django logger. 
        }, 
    }, 
}

#! Burada yazılanlar default olan ayarlamalar, bunlar global alanda çalışır,
#! Eğer view içinde import edip kullanırsak o zamam local alanda çalışmış olurlar ve burada yazılsa bile onu ezerler,

#? GLOBAL TANIMLAMA : (main --> settings içine yazarak):
# yapılan ayar bütün endpointler için geçerli olur,
# mesela settings içine; 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5, yazılırsa
# var olan bütün endpointlerde artık 5'li PageNumberPagination geçerli olur, 

#? LOCAL TANIMLAMA : (view içinde import ederek, default veya customize) :
# Sadece yazılan view'ın endpointinde geçerli olur,
# mesela bir endpoint için 8'li PageNumberPagination yapılırken
# başka birisi için 3'lü CustomLimitOffsetPagination yapılabilir.

#* dikkat edilmesi gereken local olan global olanı zaten ezecektir,
# yani settings içine; 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5, yazılırsa
# var olan bütün endpointlerde artık 5'li PageNumberPagination geçerli olur,
# fakat değiştirmek istediğimiz view'da import edip bir CustomPagination kullanırsak
# sadece orası değişir, diğerleri yine aynı kalır.

#? Global / Local kavramı diğer ayarlar (filter , search, ordering vs..) içinde aynı mantıkla çalışır

REST_FRAMEWORK = {
    #? authentication
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    
    #? pagination
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2,
    
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5,
    
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.CursorPagination',
    'PAGE_SIZE': 4,
    
    #? filter
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    
    #? search
    'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter'],

    #? ordering
    'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.OrderingFilter'],
    
    #? filter + search + ordering
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter',
                                'rest_framework.filters.OrderingFilter'],
}

