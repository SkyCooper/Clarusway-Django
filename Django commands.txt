--Check the versions of python and pip
python --version
pip --version

--Install virtual environment
(bunu yapmamızın sebebi sistemlerin, paketlerin versiyonları değişse bile
daha sonradan hata vermeden kullanılabilsin diye global'de değil virtual'da çalışmak lazım.)
python -m venv env (buradaki env => bestpractice dosya ismi)

--activate virtual environment
# Powershell    => .\env\Scripts\activate
# bash          => source env/Scripts/Activate
# linux/mac     => source env/bin/activate 

--deactivate virtual environment
deactivate

--activate esnasında hata olursa bu komutu kullan;
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

--django kurumak için;
pip install django

--pip update için;
pip install --upgrade pip
python -m --pip install --upgrade pip


--gitignore dosyası oluşturma;
ana dizine .gitignore isminde dosya oluştur.
https://www.toptal.com/developers/gitignore/api/django adresinden Template olarak al
env'den farklı bir isim verdiysen gitignore içine ilgili bölüme dosya ismini ekle..

--yeni bir proje başlatmak için;
main klasörü ekle (bestpractice), nokta(.) kullan, iç içe olmaması için
django-admin startproject main .

--server çalıştır.
python manage.py runserver (default port 8000)
python manage.py runserver 8080 (port numarasını değiştirme )

--server durdur.
ctrl + c durdur

( terminalden proje başlattıktan sonra artık terminale konut yazılamaz,
bunun için yeni bir terminal aç ve server AKTIF et;
# bash          => source env/Scripts/Activate
 )

--terminaldeki migrate uyarılarını düzeltmek için,
python manage.py migrate

--You have 18 unapplied migration(s). bu uyarı default olarak djangonun oluşturduğu app'lerden kaynaklanıyor.

--yeni bir app(klasör) oluşturma;
(manage.py ile aynı dizinde olduğundan emin ol, ondan sonra terminale bu komutu yaz )
python manage.py startapp nameofyourproject (fscohort vs.)

(bunu yaptıktan sonra proje dizinine(main) gidip settings.py içinde
INSTALLED_APPS listesi içine proje ismini eklememiz gerekiyor)

(eklerken karışmaması için önce #myapps gibi bir yorum satırı ekleyip
sonra tırnak içinde app ismi ve sonrasında virgül koymak gerekiyor.
'nameofyourproject',
'fscohort',
'dscohort',
'awscohort',)


--kurulan paketleri görmek için;
pip freeze veya 
pip list

--kurulan paketleri görmek için;
pip freeze > requirements.txt
( yüklü paketleri txt dosyasına kaydettik bunu yapmamızın sebebi
projeyi sunduğumuzda kullandığımız paketleri göstermesi için )

--pull edilen projeyi ayağa kaldırmak için
pip install -r requirements.txt


MODELLERDE İŞLEM/DEĞİŞİKLİK YAPINCA YAPINCA
--models.py dosyası içerisine bir model oluşturduktan sonra sırasıyla bu komutları çalıştır;

1 - python manage.py makemigrations nameofyourproject (fscohort vs.)
(Django'ya modellerinizde bazı değişiklikler yaptığınızı
ve değişikliklerin depolanmasını istediğinizi söylüyorsunuz. )

2- python manage.py migrate 
( Migrate komutu, uygulanmamış değişiklikleri alır ve bunları veritabanınızda çalıştırır - temel olarak, modellerinizde yaptığınız değişiklikleri veritabanındaki şema ile senkronize eder.)

DATABASE'de değişiklik yapılınca bu 2 komut mutlaka tekrar çelıştırılır.

ORM-> python ile yazılan sorgu kodlarını arka plandaki database için SQL formatına çevirir.


--Admin olarak LOGIN olmak için;
python manage.py createsuperuser

(fakat bu kod çalışmadan migrate hatası verebilir, eğer önceden migrate yapılmamış ise;
python manage.py migrate 	bu komuttan sonra tekrar yukarıfaki komutu çalıştır. )

Username : ( admin yazılabilir bestpractice )
Email adress: (Boş bırakmak için ENTER ile geçilebilir.)
Password: **********
Password (again): ********* (yazarken görünmez)
Superuser created successfully.

** .env dosyası oluşturulup username ve Password bilgisi oraya kayıt edilebilir,
daha sonradan güvenli şekilde bakmak için

python manage.py runserver ile serverı çalıştırıp,

http://127.0.0.1:8000/admin/ daha sonra bu adresten login ekranına gidilir.

createsuperuser ile oluşturulan username/password girilir.
fakat oluşturulan tablo (yani fscohort models.py içindeki class ) görünmez,

bunun için fscohort içindeki admin.py içerisine tabloyu(classı) import etmemiz gerekli
( from .models import Student(classname) )
sonradan ; admin.site.register(Student) komutunu yazıp tabloyu register ediyoruz.


(LMS teki kurulum vido linki =>  How to Install and Use Django 
https://youtu.be/osKPG2ripmw ) 

--image (resim) işleme eklentisi kurma 
pip install pillow

-- main settings içine 
STATIC_URL = 'static/' altına ekle;
1-
MEDIA_URL = 'media/'

2-
MEDIA_ROOT = BASE_DIR / 'media/'

media_url -> hangi urlyi kullanacaksın
media_root -> hangi klasöre yüklemek istersin.

https://docs.djangoproject.com/en/4.1/howto/static-files/
bu adresten nasıl yapılacağına bak, import vs. nasıl yapılacak...


-- main urls içine 
3-
from django.conf import settings
from django.conf.urls.static import static

urlpatterns +=  static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


-- USER 
--djangonun admin panelde otomatik oluşturduğu "Users" tablosuna(modeline) ulaşmak için;
models.py içine;
from django.contrib.auth.models import User => ile import ediyoruz.

--USER model olarak kullanmak için models içine;
from django.contrib.auth.models import User import et

SECRET_KEY kullanmak için eklenecek paket;
pip install python-decouple

.env dosyası içine main/settings.py içindeki;
SECRET_KEY = 'django-insecure-c#l(2*++o(+ywyek#isx%g!=fr3)*xgdm=4#=qf)6sx=n6fs4x'
bunu alıp tırnakları ve boşlukları kaldırarak . env için kayıt et;
SECRET_KEY =django-insecure-c#l(2*++o(+ywyek#isx%g!=fr3)*xgdm=4#=qf)6sx=n6fs4x

main/settings.py içine;
from decouple import config => bunu import et 
SECRET_KEY = config("SECRET_KEY") => bu hale getir.


DJANGO-API gibi çalışması için mikro-framework kurulumu yapılıyor,

1- pip install djangorestframework
2- main/settings.py INSTALLED_APPS =>  'rest_framework', EKLE
3- serializers.py isimli dosyayı oluştur;

from rest_framework import serializers

class StudentSerializer(serializers.Serializer):
  pass

--FAKER; (dj-08)
pip install Faker
pip freeze > requirements.txt
faker.py isimli dosya oluştur.
python manage.py shell
from nameofapp.faker import run
run()
exit()

--PAGINATION İÇİN; (dj-08)
settings en sonuna;

hangisini kullanacaksan o kalsın diğer ikili grupları sil...
REST_FRAMEWORK = {
        'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 30,
    
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 30,
    
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.CursorPagination',
    'PAGE_SIZE': 30,
}

custimize etmek için pagination.py ekle;

yapılan paginationı views içine import et,
from .pagination import * (hepsini ekle demek)

views.py içindeki view altına;
pagination_class = CustomPageNumberPagination
(hangisini kullanacaksan adını yaz)

---FİLTER/SEARCH için; (dj-08)

pip install django-filter
pip freeze > requirements.txt

'django_filters',  --> ekle settings içine

settings sonuna ekle;
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}


import et;
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter, OrderingFilter


views.py içindeki view altına;
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ["id", "first_name", "last_name"]
    search_fields = ["first_name", "last_name"]
    search_fields=['^first_name']  #baş harfine göre arama yapmak için,
    ordering_fields = ['first_name','last_name']  #* filter boxta hangi seçenekler çıksın istiyorsanız onu yazıyorsunuz
    ordering = ['last_name']  #* default olarak ilk açıldığında buraya yazdığımıza göre sıralıyor


--PERMISSIOIN (dj09)
basıc Authotantıcatıon;
settings, REST_FRAMEWORK = { içine ekle---> 'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework.authentication.BasicAuthentication' ]
from rest_framework.permissions import IsAuthenticated  ---> import et view içine,
permission_classes = [IsAuthenticated] viewe ekle ..


























