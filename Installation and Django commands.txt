--Check the versions of python and pip
python --version
pip --version

--Install virtual environment
(bunu yapmamızın sebebi sistemlerin, paketlerin versiyonları değişse bile
daha sonradan hata vermeden kullanılabilsin diye global'de değil virtual'da çalışmak lazım.)
python -m venv env (buradaki env => bestpractice dosya ismi)

--activate virtual environment
# Powershell    => .\env\Scripts\activate
# bash          => source env/Scripts/Activate
# linux/mac     => source env/bin/activate 

--deactivate virtual environment
deactivate

--activate esnasında hata olursa bu komutu kullan;
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

--django kurumak için;
pip install django

--pip update için;
pip install --upgrade pip


--gitignore dosyası oluşturma;
ana dizine .gitignore isminde dosya oluştur.
https://www.toptal.com/developers/gitignore/api/django adresinden Template olarak al
env'den farklı bir isim verdiysen gitignore içine ilgili bölüme dosya ismini ekle..

--yeni bir proje başlatmak için;
main klasörü ekle (bestpractice), nokta(.) kullan, iç içe olmaması için
django-admin startproject main .

--server çalıştır.
python manage.py runserver (default port 8000)
python manage.py runserver 8080 (port numarasını değiştirme )

--server durdur.
ctrl + c durdur

( terminalden proje başlattıktan sonra artık terminale konut yazılamaz,
bunun için yeni bir terminal aç )

--terminaldeki migrate uyarılarını düzeltmek için,
python manage.py migrate

--yeni bir app(klasör) oluşturma;
(manage.py ile aynı dizinde olduğundan emin ol, ondan sonra terminale bu komutu yaz )
python manage.py startapp nameofyourproject (fscohort vs.)

(bunu yaptıktan sonra proje dizinine(main) gidip settings.py içinde
INSTALLED_APPS listesi içine proje ismini eklememiz gerekiyor)

(eklerken karışmaması için önce #myapps gibi bir yorum satırı ekleyip
sonra tırnak içinde app ismi ve sonrasında virgül koymak gerekiyor.
'nameofyourproject',
'fscohort',
'dscohort',
'awscohort',)


--kurulan paketleri görmek için;
pip freeze veya 
pip list

--kurulan paketleri görmek için;
pip freeze > requirements.txt
( yüklü paketleri txt dosyasına kaydettik bunu yapmamızın sebebi
projeyi sunduğumuzda kullandığımız paketleri göstermesi için )

--pull edilen projeyi ayağa kaldırmak için
pip install -r requirements.txt

--Admin olarak LOGIN olmak için;
python manage.py createsuperuser

(fakat bu kod çalışmadan migrate hatası verebilir, eğer önceden migrate yapılmamış ise;
python manage.py migrate 	bu komuttan sonra tekrar yukarıfaki komutu çalıştır. )

Username :
Email adress:
Password: **********
Password (again): *********
Superuser created successfully.

http://127.0.0.1:8000/admin/ daha sonra bu adresten login ekranına gidilir.

(LMS teki kurulum vido linki =>  How to Install and Use Django 
https://youtu.be/osKPG2ripmw ) 

--models.py dosyası içerisine bir model oluşturduktan sonra sırasıyla bu komutları çalıştır;
1 - python manage.py makemigrations nameofyourproject (fscohort vs.)
(Django'ya modellerinizde bazı değişiklikler yaptığınızı (bu durumda yenilerini yaptığınızı)
ve değişikliklerin depolanmasını istediğinizi söylüyorsunuz.)

2- python manage.py migrate 
( Migrate komutu, uygulanmamış değişiklikleri alır ve bunları veritabanınızda çalıştırır - temel olarak, modellerinizde yaptığınız değişiklikleri veritabanındaki şema ile senkronize eder.)

ORM-> python ile yazılan sorgu kodlarını arka plandaki database için SQL formatına çevirir.






